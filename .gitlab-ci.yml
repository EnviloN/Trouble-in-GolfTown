stages:
  - activate
  - build
  - deploy

# If you are looking for a place where to add 'UNITY_LICENSE_FILE' and other secrets, please visit your project's gitlab page:
# settings > CI/CD > Variables instead
variables:
  BUILD_NAME: TroubleInGolfTown
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: 2019.4.11f1
  IMAGE: unityci/editor # https://hub.docker.com/r/unityci/editor
  IMAGE_VERSION: "0.5" # https://github.com/Unity-CI/docker/releases

image: $IMAGE:$UNITY_VERSION-base-$IMAGE_VERSION

.unity_before_script: &unity_before_script
  before_script:
    - chmod +x ./ci/before_script.sh && ./ci/before_script.sh

.cache: &cache
  cache:
    key: "$CI_PROJECT_NAMESPACE-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG-$TEST_PLATFORM"
    paths:
      - Library/

# run this job when you need to request a license
# you may need to follow activation steps from documentation
get-activation-file:
  stage: activate
  script:
    - chmod +x ./ci/get_activation_file.sh && ./ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 20 min # Expiring this as artifacts may contain sensitive data and should not be kept public
  when: manual
  tags:
    - pickaja3-home-runner

.build: &build
  stage: build
  <<: *unity_before_script
  <<: *cache
  script:
    - chmod +x ./ci/build.sh && ./ci/build.sh
  artifacts:
    paths:
      - ./Builds/
  tags:
    - pickaja3-home-runner

build-StandaloneWindows64:
  <<: *build
  image: $IMAGE:$UNITY_VERSION-windows-mono-$IMAGE_VERSION
  variables:
    BUILD_TARGET: StandaloneWindows64

# build-WebGL:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-webgl-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: WebGL

# build-android:
#   <<: *build
#   image: $IMAGE:$UNITY_VERSION-android-$IMAGE_VERSION
#   variables:
#     BUILD_TARGET: Android
#     BUNDLE_VERSION_CODE: $CI_PIPELINE_IID
#     BUILD_APP_BUNDLE: "false"

#deploy-android:
#  stage: deploy
#  image: ruby
#  script: 
#    - cd ./Builds/Android
#    - echo $GPC_TOKEN > gpc_token.json
#    - gem install bundler
#    - bundle install
#    - fastlane supply --aab $BUILD_NAME.aab --track internal --package_name com.youcompany.yourgame --json_key ./gpc_token.json
#  needs: ["build-android"]

# pages:
#   image: alpine:latest
#   stage: deploy
#   script:
#     - mv "./Builds/WebGL/${BUILD_NAME}" public
#   artifacts:
#     paths:
#       - public
#   only:
#     - master
